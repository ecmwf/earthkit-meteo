# (C) Copyright 2021 ECMWF.
#
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
# In applying this licence, ECMWF does not waive the privileges and immunities
# granted to it by virtue of its status as an intergovernmental organisation
# nor does it submit to any jurisdiction.
#

import numpy as np

from earthkit.meteo import extreme

ens = np.array(
    [
        273.56037903,
        273.61122131,
        273.63012695,
        273.59335327,
        273.57876587,
        273.65365601,
        273.61138916,
        273.56483459,
        273.51663208,
        273.58750916,
        273.65254211,
        273.60098267,
        273.58737183,
        273.60316467,
        273.59606934,
        273.60876465,
        273.50160217,
        273.57923889,
        273.56584167,
        273.49942017,
        273.62069702,
        273.58499146,
        273.58781433,
        273.59477234,
        273.68614197,
        273.60530090,
        273.53808594,
        273.54582214,
        273.65734863,
        273.65567017,
        273.57177734,
        273.55506897,
        273.55067444,
        273.56301880,
        273.54679871,
        273.58064270,
        273.56997681,
        273.61926270,
        273.57879639,
        273.60385132,
        273.63429260,
        273.61221313,
        273.40080261,
        273.52342224,
        273.63037109,
        273.54180908,
        273.56486511,
        273.60005188,
        273.49523926,
        273.56845093,
        273.621521,
    ]
)
ens = ens[:, np.newaxis]

ens_eps = np.array(
    [
        0.00458526611328125,
        0.0051116943359375,
        0.0065460205078125,
        0.00421142578125,
        0.0057830810546875,
        0.008014678955078125,
        0.004108428955078125,
        0.00556182861328125,
        0.004291534423828125,
        0.00505828857421875,
        0.002925872802734375,
        0.007587432861328125,
        0.00222015380859375,
        0.007373809814453125,
        0.0028076171875,
        0.005950927734375,
        0.004131317138671875,
        0.004913330078125,
        0.00797271728515625,
        0.005260467529296875,
        0.0038299560546875,
        0.007537841796875,
        0.00521087646484375,
        0.0087127685546875,
        0.007537841796875,
        0.00247955322265625,
        0.002040863037109375,
        0.0065765380859375,
        0.006870269775390625,
        0.0051422119140625,
        0.004852294921875,
        0.00359344482421875,
        0.00231170654296875,
        0.0048675537109375,
        0.0071563720703125,
        0.0062408447265625,
        0.00475311279296875,
        0.00350189208984375,
        0.00746917724609375,
        0.0047607421875,
        0.00444793701171875,
        0.00389862060546875,
        0.0027923583984375,
        0.004535675048828125,
        0.00621795654296875,
        0.00292205810546875,
        0.00658416748046875,
        0.0046234130859375,
        0.00444793701171875,
        0.0044403076171875,
        0.005218505859375,
    ]
)
ens_eps = ens_eps[:, np.newaxis]

clim = np.array(
    [
        270.31404114,
        271.04376221,
        271.88911438,
        272.17996216,
        272.29629517,
        272.45881653,
        272.55467224,
        272.67176819,
        272.76577759,
        272.89602661,
        272.93855286,
        273.01394653,
        273.08497620,
        273.13676453,
        273.19113159,
        273.22419739,
        273.25590515,
        273.26646423,
        273.30346680,
        273.31695557,
        273.31858826,
        273.33642578,
        273.37065125,
        273.39843750,
        273.40194702,
        273.44013977,
        273.44854736,
        273.47970581,
        273.49264526,
        273.50416565,
        273.52960205,
        273.54267883,
        273.56050110,
        273.55299377,
        273.56401062,
        273.58006287,
        273.58612061,
        273.62063599,
        273.60931396,
        273.60650635,
        273.61801147,
        273.62141418,
        273.65431213,
        273.63867188,
        273.65670776,
        273.67222595,
        273.65425110,
        273.68618774,
        273.68138123,
        273.67578125,
        273.69137573,
        273.68821716,
        273.69772339,
        273.69319153,
        273.70791626,
        273.73648071,
        273.71696472,
        273.72935486,
        273.74089050,
        273.73986816,
        273.76908875,
        273.75910950,
        273.78601074,
        273.78836060,
        273.80046082,
        273.79504395,
        273.81297302,
        273.80552673,
        273.81306458,
        273.83451843,
        273.83099365,
        273.84126282,
        273.84231567,
        273.85221863,
        273.88308716,
        273.87722778,
        273.89910889,
        273.90881348,
        273.88888550,
        273.90223694,
        273.92579651,
        273.93246460,
        273.93844604,
        273.95280457,
        273.96545410,
        273.98947144,
        273.98995972,
        274.02645874,
        274.05247498,
        274.06059265,
        274.05807495,
        274.10276794,
        274.12309265,
        274.15106201,
        274.16433716,
        274.19328308,
        274.20668030,
        274.27967834,
        274.33123779,
        274.42781067,
        274.55859375,
    ]
)
clim = clim[:, np.newaxis]

clim_eps = np.array(
    [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        6.103515625e-05,
        0.0001220703125,
        0.0001220703125,
        0.0001220703125,
        0.0001220703125,
        0.0001220703125,
        0.0001220703125,
        0.0001220703125,
        0.0001220703125,
        0.0001220703125,
        0.0001220703125,
        0.00018310546875,
        0.000244140625,
        0.0002441406250,
        0.0002441406250,
        0.0002441406250,
        0.0002441406250,
        0.00030517578125,
        0.0003662109375,
        0.0003662109375,
        0.0003662109375,
        0.0003662109375,
        0.00042724609375,
        0.00048828125,
        0.00048828125,
        0.00048828125,
        0.00054931640625,
        0.0006103515625,
        0.0006103515625,
        0.000732421875,
        0.000732421875,
        0.00079345703125,
        0.0008544921875,
        0.0009765625,
        0.0009765625,
        0.0010986328125,
        0.001220703125,
        0.0013427734375,
        0.00146484375,
        0.00152587890625,
        0.001708984375,
        0.0018310546875,
        0.001953125,
        0.0020751953125,
        0.00225830078125,
        0.00244140625,
        0.0025634765625,
        0.0028076171875,
        0.0030517578125,
        0.0032958984375,
        0.00341796875,
        0.003662109375,
        0.0037841796875,
        0.004150390625,
        0.00433349609375,
        0.0045166015625,
        0.0047607421875,
        0.005126953125,
        0.0054931640625,
        0.005859375,
        0.0062255859375,
        0.006591796875,
        0.007080078125,
        0.00732421875,
        0.0078125,
        0.00830078125,
        0.0089111328125,
        0.009765625,
        0.01177978515625,
        0.01336669921875,
        0.015625,
        0.02294921875,
    ]
)
clim_eps = clim_eps[:, np.newaxis]

ens_eps2 = np.array(
    [
        0.41961669921875,
        0.4482269287109375,
        0.60272216796875,
        0.6380081176757812,
        0.46539306640625,
        0.461578369140625,
        0.06389617919921875,
        0.6380081176757812,
        0.3070831298828125,
        1.1043548583984375,
        0.9107589721679688,
        0.5931854248046875,
        0.48732757568359375,
        0.20503997802734375,
        0.16117095947265625,
        0.30231475830078125,
        0.5283355712890625,
        0.24127960205078125,
        0.823974609375,
        0.8258819580078125,
        0.7534027099609375,
        0.2307891845703125,
        0.09632110595703125,
        0.08106231689453125,
        0.4138946533203125,
        0.5159378051757812,
        1.7681121826171875,
        1.1615753173828125,
        0.8449554443359375,
        0.5655288696289062,
        0.05054473876953125,
        0.29754638671875,
        0.4482269287109375,
        0.186920166015625,
        0.8544921875,
        0.286102294921875,
        0.0514984130859375,
        1.2903213500976562,
        0.7524490356445312,
        0.820159912109375,
        0.13446807861328125,
        0.6704330444335938,
        0.8459091186523438,
        0.45490264892578125,
        0.4444122314453125,
        0.0896453857421875,
        0.03147125244140625,
        0.4062652587890625,
        0.16117095947265625,
        0.8554458618164062,
        1.5535354614257812,
    ]
)
ens_eps2 = ens_eps2[:, np.newaxis]

clim_eps2 = np.array(
    [
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.48828125,
    ]
)
clim_eps2 = clim_eps2[:, np.newaxis]


def test_efi():
    efi = extreme.array.efi(clim, ens)

    assert np.isclose(efi[0], -0.18384250406420133)


def test_efi_sorted():
    # ensures the algorithm is the same if we sort the data or not
    ens_perc = np.sort(ens)

    efi = extreme.array.efi(clim, ens_perc)

    assert np.isclose(efi[0], -0.18384250406420133)


def test_efi_eps():
    efi = extreme.array.efi(clim, ens, eps=1e-4)

    assert np.isclose(efi[0], -0.18384250406420133)


def test_efi_eps1():
    efi = extreme.array.efi(clim_eps, ens_eps, eps=1e-4)

    # fortran code result is  0.4604220986366272
    assert np.isclose(efi[0], 0.46039347745967046)


def test_efi_eps2():
    efi = extreme.array.efi(clim_eps2, ens_eps2, eps=1e-4)

    # fortran code result is
    assert np.isclose(efi[0], 0.6330071575726789)


def test_sot():
    sot_upper = extreme.array.sot(clim, ens, 90)
    sot_lower = extreme.array.sot(clim, ens, 10)

    print(sot_upper)
    print(sot_lower)

    assert np.isclose(sot_upper[0], -2.14617638)
    assert np.isclose(sot_lower[0], -1.3086723)


def test_sot_missing():
    # first value valid, second -> inf, third gives nan, third is below threshold -> nan
    qc_tail = np.array([1.0, 1.0, 1.0, 1.0])
    qc = np.array([1.1, 1.0, 1.0, 1.00001])
    qf = np.array([1.5, 1.2, 1.0, 0.9])

    sot = extreme.array.sot_func(qc_tail, qc, qf, eps=1e-4)

    print(sot)
    print(np.isnan(sot))

    assert np.isclose(sot[0], -5)

    assert np.array_equal(np.isnan(sot[1:]), [True, True, True])


def test_sot_bounds():
    # first is lower bound, second is upper bound
    qc_tail = np.array([1.0, 1.0])
    qc = np.array([1.1, 1.1])
    qf = np.array([15, -15.0])

    sot = extreme.array.sot_func(qc_tail, qc, qf)

    print(sot)
    assert np.allclose(sot, [-10, 10])


def test_sot_eps():
    # first value valid, second -> inf, third gives nan, third is below threshold -> nan
    qc_tail = np.array([0.05])
    qc = np.array([0.1])
    qf = np.array([0.2])

    sot = extreme.array.sot_func(qc_tail, qc, qf)
    print(sot)
    assert np.isclose(sot[0], -3.0)

    sot = extreme.array.sot_func(qc_tail, qc, qf, eps=0.15)
    print(sot)
    assert np.isnan(sot[0])


def test_sot_perc():
    sot = extreme.array.sot(clim_eps2, ens_eps2, 90, eps=1e4)

    assert np.isnan(sot[0])


def test_efi_nan():
    clim_nan = np.empty((101, 1))
    clim_nan[:] = np.nan
    ens_nan = np.empty((51, 1))
    ens_nan[:] = np.nan
    print(clim_nan)
    print(ens_nan)

    efi = extreme.array.efi(clim_nan, ens_nan)

    print(efi)
    assert np.isnan(efi[0])


def test_sot_nan():
    qc_tail = np.array([0.05])
    qc = np.array([0.1])
    qf = np.array([np.nan])

    sot = extreme.array.sot_func(qc_tail, qc, qf)
    assert np.isnan(sot[0])

    qc_tail = np.array([0.05])
    qc = np.array([np.nan])
    qf = np.array([0.1])

    sot = extreme.array.sot_func(qc_tail, qc, qf)
    assert np.isnan(sot[0])

    qc_tail = np.array([np.nan])
    qc = np.array([0.1])
    qf = np.array([0.2])

    sot = extreme.array.sot_func(qc_tail, qc, qf)
    assert np.isnan(sot[0])


cpf_val = np.array([0.0, 1.0, 0.21153846, 0.53846157, 0.7307692], dtype=np.float32)
cpf_ens = np.array(
    [
        [299.3667, 299.97998, 276.91553, 298.83936, 296.2339],
        [299.99323, 299.92096, 276.72174, 298.62604, 296.4854],
        [299.86163, 299.3382, 276.6468, 298.63312, 296.09015],
        [299.12872, 301.24005, 277.24396, 298.7635, 296.03693],
        [299.42084, 299.52435, 276.62396, 298.2802, 296.37592],
        [299.12198, 299.77823, 276.53995, 298.7548, 296.5341],
        [299.0536, 299.80554, 276.46375, 298.72742, 295.91296],
        [299.197, 300.52902, 276.697, 298.72238, 296.01144],
        [298.88193, 299.34482, 277.19247, 298.70615, 296.35068],
        [299.5131, 300.50528, 276.808, 298.95255, 296.3842],
        [299.88654, 299.367, 276.7713, 298.7342, 296.6053],
        [299.2812, 299.88275, 276.5136, 298.89447, 296.05267],
        [299.32745, 299.9505, 277.42316, 298.12042, 296.7044],
        [298.97488, 299.3245, 276.65262, 298.59402, 296.4788],
        [299.56702, 299.83655, 276.5006, 298.46545, 295.9342],
        [300.4615, 299.86383, 277.0103, 298.80133, 296.7779],
        [298.95248, 300.66537, 276.30014, 298.6888, 295.95444],
        [300.07544, 300.52466, 276.85083, 298.53052, 295.72192],
        [299.23877, 300.64697, 276.99072, 298.17822, 296.36377],
        [299.89127, 300.12173, 276.8854, 298.80142, 296.02798],
        [299.85345, 300.22455, 276.83197, 298.75775, 296.24603],
        [299.69104, 300.41956, 276.75745, 298.50745, 296.03088],
        [299.32013, 299.89825, 276.53497, 298.97052, 296.25372],
        [299.34235, 299.8404, 276.66852, 298.65485, 296.4478],
        [299.51978, 300.20142, 276.9182, 298.69556, 295.96313],
        [299.12, 299.6571, 277.2411, 299.03406, 296.32312],
        [299.1634, 300.07355, 276.9466, 298.73175, 295.7923],
        [299.4486, 300.1361, 276.49353, 298.67908, 295.75525],
        [299.0878, 299.90225, 277.06436, 298.85147, 295.54678],
        [299.26794, 299.7777, 276.66052, 298.60583, 296.0453],
        [300.09146, 299.7399, 276.9567, 298.81216, 296.41763],
        [298.36334, 300.7813, 276.97662, 298.72662, 296.59576],
        [299.5633, 299.8719, 276.65704, 298.85822, 296.02618],
        [299.65924, 299.62604, 276.97955, 298.64752, 296.3858],
        [299.18683, 299.6009, 276.84894, 298.8919, 296.01105],
        [299.18616, 299.7213, 276.84045, 298.72522, 295.2174],
        [299.2762, 299.39145, 276.59067, 299.04184, 296.18832],
        [299.14, 299.89197, 276.55798, 298.95642, 296.02087],
        [299.52063, 299.87805, 276.63586, 298.49133, 296.14758],
        [299.1657, 300.37274, 276.78876, 298.73212, 296.1618],
        [299.11887, 299.68918, 276.93137, 298.363, 296.08762],
        [298.96027, 300.2884, 276.94464, 298.71417, 296.38605],
        [299.3237, 299.8823, 276.62643, 298.31784, 296.33542],
        [299.65875, 300.9439, 276.64313, 298.60016, 296.23883],
        [299.38763, 300.9677, 276.46576, 298.706, 296.42474],
        [299.6558, 300.36673, 277.55423, 298.62064, 296.1382],
        [298.9718, 299.38782, 277.0265, 298.83508, 295.49915],
        [299.56116, 300.26624, 276.89124, 298.8131, 296.1217],
        [298.70483, 299.61694, 276.32202, 298.53687, 296.1931],
        [299.25137, 300.9799, 276.9291, 298.81583, 296.1459],
        [298.67615, 300.391, 277.0199, 298.65076, 296.50623],
    ],
    dtype=np.float32,
)
cpf_clim = np.array(
    [
        [298.3246, 292.73083, 272.6996, 296.6996, 290.91833],
        [298.75378, 294.94128, 273.84753, 297.41003, 292.53503],
        [298.88678, 295.19928, 274.54303, 297.57428, 292.85553],
        [298.95166, 295.3579, 274.7954, 297.63916, 293.0454],
        [299.00775, 295.57025, 274.914, 297.7265, 293.164],
        [299.07755, 295.6713, 275.07755, 297.7963, 293.32755],
        [299.12042, 295.80792, 275.21417, 297.83917, 293.46417],
        [299.1596, 295.94086, 275.31586, 297.87836, 293.62836],
        [299.19135, 296.0351, 275.44135, 297.9101, 293.75385],
        [299.21613, 296.09113, 275.52863, 297.96613, 293.87238],
        [299.2633, 296.16956, 275.66956, 298.0133, 293.91956],
        [299.27515, 296.2439, 275.8064, 298.02515, 293.9939],
        [299.3001, 296.3001, 275.89386, 298.0501, 294.0501],
        [299.32086, 296.38336, 275.9771, 298.07086, 294.07086],
        [299.36493, 296.42743, 276.08368, 298.11493, 294.11493],
        [299.36322, 296.48822, 276.17572, 298.14447, 294.17572],
        [299.39822, 296.55447, 276.24197, 298.14822, 294.24197],
        [299.434, 296.6215, 276.309, 298.184, 294.27774],
        [299.44525, 296.63275, 276.38275, 298.19525, 294.3515],
        [299.46143, 296.68018, 276.46143, 298.21143, 294.36768],
        [299.4816, 296.7316, 276.57535, 298.2316, 294.4191],
        [299.49713, 296.77838, 276.62213, 298.27838, 294.49713],
        [299.52496, 296.8062, 276.64996, 298.27496, 294.52496],
        [299.53876, 296.82, 276.695, 298.28876, 294.60126],
        [299.56372, 296.87622, 276.78247, 298.31372, 294.62622],
        [299.56152, 296.93652, 276.84277, 298.31152, 294.68652],
        [299.60294, 296.9467, 276.91544, 298.35294, 294.72794],
        [299.61484, 296.9586, 276.98984, 298.36484, 294.7711],
        [299.60883, 297.01508, 277.04633, 298.39008, 294.85883],
        [299.62442, 297.03067, 277.09317, 298.37442, 294.90567],
        [299.6407, 297.0782, 277.1407, 298.3907, 294.9532],
        [299.67407, 297.14282, 277.20532, 298.42407, 294.98657],
        [299.69638, 297.16513, 277.25888, 298.44638, 295.00888],
        [299.7088, 297.2088, 277.3338, 298.4588, 295.05255],
        [299.7254, 297.2254, 277.4129, 298.4754, 295.06915],
        [299.75555, 297.25555, 277.4743, 298.50555, 295.0993],
        [299.74548, 297.27673, 277.55798, 298.49548, 295.15173],
        [299.79517, 297.32642, 277.60767, 298.51392, 295.17017],
        [299.81113, 297.34238, 277.65488, 298.52988, 295.21738],
        [299.80298, 297.36548, 277.70923, 298.55298, 295.24048],
        [299.82, 297.3825, 277.78876, 298.57, 295.28876],
        [299.83588, 297.42963, 277.86713, 298.58588, 295.30463],
        [299.8523, 297.4773, 277.94604, 298.6023, 295.3523],
        [299.85468, 297.47968, 277.97968, 298.60468, 295.35468],
        [299.87244, 297.5287, 278.05994, 298.62244, 295.4037],
        [299.9093, 297.56555, 278.0968, 298.62805, 295.44055],
        [299.9245, 297.58075, 278.14325, 298.64325, 295.487],
        [299.92245, 297.60995, 278.2037, 298.67245, 295.5162],
        [299.95905, 297.64655, 278.3028, 298.6778, 295.5528],
        [299.972, 297.6595, 278.37823, 298.69073, 295.597],
        [299.96408, 297.68283, 278.46408, 298.71408, 295.62033],
        [300.00043, 297.71918, 278.53168, 298.71918, 295.65668],
        [300.0108, 297.7608, 278.6358, 298.72955, 295.6983],
        [300.03705, 297.78705, 278.7558, 298.7558, 295.7558],
        [300.0407, 297.82196, 278.82196, 298.75946, 295.7907],
        [300.05652, 297.86902, 278.86902, 298.77527, 295.83777],
        [300.0688, 297.8813, 278.91254, 298.78754, 295.8813],
        [300.1017, 297.9142, 279.00797, 298.7892, 295.9142],
        [300.09235, 297.9361, 279.09235, 298.8111, 295.96735],
        [300.1114, 297.95514, 279.1739, 298.83014, 295.9864],
        [300.14584, 297.9896, 279.20834, 298.83334, 296.02084],
        [300.16125, 298.005, 279.28625, 298.84875, 296.0675],
        [300.1659, 298.0409, 279.38464, 298.8534, 296.1034],
        [300.20065, 298.07565, 279.45065, 298.8569, 296.13815],
        [300.20398, 298.11023, 279.51648, 298.89148, 296.14148],
        [300.21356, 298.1198, 279.58856, 298.90106, 296.1823],
        [300.2539, 298.16016, 279.66016, 298.91016, 296.22266],
        [300.2667, 298.2042, 279.7042, 298.92294, 296.23544],
        [300.2884, 298.2259, 279.75714, 298.9134, 296.2884],
        [300.28217, 298.25092, 279.84467, 298.93842, 296.31342],
        [300.31854, 298.2873, 279.9123, 298.94354, 296.31854],
        [300.3202, 298.3202, 279.9452, 298.9452, 296.35144],
        [300.3286, 298.35986, 280.0161, 298.9536, 296.3911],
        [300.37357, 298.37357, 280.09232, 298.96732, 296.43607],
        [300.36435, 298.3956, 280.1456, 298.98935, 296.4581],
        [300.4051, 298.43634, 280.18634, 298.99884, 296.49884],
        [300.41455, 298.4458, 280.2583, 299.0083, 296.53955],
        [300.4345, 298.46576, 280.3095, 299.02826, 296.59076],
        [300.4567, 298.48795, 280.36295, 299.05045, 296.61295],
        [300.47876, 298.54126, 280.41626, 299.0725, 296.635],
        [300.48907, 298.58282, 280.52032, 299.08282, 296.67657],
        [300.52576, 298.6195, 280.6195, 299.08826, 296.71326],
        [300.53998, 298.63373, 280.69623, 299.10248, 296.75873],
        [300.56067, 298.68567, 280.81067, 299.09192, 296.77942],
        [300.57727, 298.73352, 280.88977, 299.10852, 296.82727],
        [300.62796, 298.7842, 281.00296, 299.12796, 296.8467],
        [300.63678, 298.82428, 281.10553, 299.16803, 296.88678],
        [300.67902, 298.83527, 281.21027, 299.17902, 296.92902],
        [300.71036, 298.89786, 281.3666, 299.1791, 296.9916],
        [300.7229, 298.94165, 281.44165, 299.2229, 297.0354],
        [300.77243, 298.99118, 281.58493, 299.24118, 297.08493],
        [300.8109, 299.02966, 281.71716, 299.27966, 297.15466],
        [300.84314, 299.0619, 281.8119, 299.3119, 297.21814],
        [300.88876, 299.13876, 281.92, 299.32626, 297.2325],
        [300.93634, 299.18634, 282.06134, 299.37384, 297.2801],
        [300.98245, 299.29495, 282.16995, 299.41995, 297.35745],
        [301.01904, 299.4253, 282.3003, 299.4878, 297.3628],
        [301.082, 299.5195, 282.42575, 299.55075, 297.457],
        [301.22263, 299.62888, 282.62888, 299.62888, 297.50388],
        [301.3478, 299.7853, 282.9728, 299.75406, 297.69156],
        [301.72018, 300.43893, 284.06393, 300.37643, 298.15768],
    ],
    dtype=np.float32,
)


def test_cpf():
    cpf = extreme.array.cpf(cpf_clim, cpf_ens, sort_clim=True)
    np.testing.assert_allclose(cpf, cpf_val)


def test_highlevel_efi():
    efi = extreme.efi(clim, ens)

    assert np.isclose(efi[0], -0.18384250406420133)


def test_highlevel_sot():
    sot_upper = extreme.sot(clim, ens, 90)
    sot_lower = extreme.sot(clim, ens, 10)

    assert np.isclose(sot_upper[0], -2.14617638)
    assert np.isclose(sot_lower[0], -1.3086723)


def test_highlevel_cpf():
    cpf = extreme.cpf(cpf_clim, cpf_ens, sort_clim=True)
    np.testing.assert_allclose(cpf, cpf_val)
